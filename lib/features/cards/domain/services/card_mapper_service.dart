import 'package:vsc_app/features/cards/data/models/card_requests.dart';
import 'package:vsc_app/features/cards/data/models/card_responses.dart';
import 'package:vsc_app/features/cards/domain/models/card.dart';
import 'package:vsc_app/features/cards/presentation/models/card_form_models.dart';

/// Mapper service for converting between different model layers
/// Handles conversions between API DTOs, domain models, and presentation models
class CardMapperService {
  /// Convert API response to domain model
  static CardEntity fromApiResponse(CardResponse response) {
    return CardEntity(
      id: response.id,
      vendorId: response.vendorId,
      barcode: response.barcode,
      sellPrice: response.sellPriceAsDouble,
      costPrice: response.costPriceAsDouble,
      maxDiscount: response.maxDiscountAsDouble,
      quantity: response.quantity,
      image: response.image,
      perceptualHash: response.perceptualHash,
      isActive: response.isActive,
    );
  }

  /// Convert API response to domain model for similar cards
  // static SimilarCard fromSimilarCardApiResponse(SimilarCardResponse response) {
  //   return SimilarCard(
  //     id: response.id,
  //     vendorId: response.vendorId,
  //     barcode: response.barcode,
  //     sellPrice: response.sellPriceAsDouble,
  //     costPrice: response.costPriceAsDouble,
  //     maxDiscount: response.maxDiscountAsDouble,
  //     quantity: response.quantity,
  //     image: response.image,
  //     perceptualHash: response.perceptualHash,
  //     isActive: response.isActive,
  //   );
  // }

  /// Convert form model to domain model
  static CardEntity fromFormModel(CardFormViewModel formModel) {
    return CardEntity(
      id: '', // Will be generated by server
      vendorId: formModel.vendorId,
      barcode: '', // Will be generated by server
      sellPrice: formModel.sellPriceAsDouble ?? 0.0,
      costPrice: formModel.costPriceAsDouble ?? 0.0,
      maxDiscount: formModel.maxDiscountAsDouble ?? 0.0,
      quantity: formModel.quantityAsInt ?? 0,
      image: '', // Will be set by server
      perceptualHash: '', // Will be generated by server
      isActive: true,
    );
  }

  /// Convert domain model to API request
  static CreateCardRequest toCreateCardRequest(CardEntity domainModel) {
    return CreateCardRequest(
      costPrice: domainModel.costPrice,
      sellPrice: domainModel.sellPrice,
      quantity: domainModel.quantity,
      maxDiscount: domainModel.maxDiscount,
      vendorId: domainModel.vendorId,
    );
  }

  /// Convert domain model to API response (for reverse mapping if needed)
  static CardResponse toApiResponse(CardEntity domainModel) {
    return CardResponse(
      id: domainModel.id,
      vendorId: domainModel.vendorId,
      barcode: domainModel.barcode,
      sellPrice: domainModel.sellPrice.toString(),
      costPrice: domainModel.costPrice.toString(),
      maxDiscount: domainModel.maxDiscount.toString(),
      quantity: domainModel.quantity,
      image: domainModel.image,
      perceptualHash: domainModel.perceptualHash,
      isActive: domainModel.isActive,
    );
  }
}
