# VSC App Codebase Audit TODO List

## Architecture & Structure Issues

1. **Widget State Management**
   - Issue: Many widgets using setState directly instead of providers
   - Fix: Convert stateful widgets to stateless and use providers for state management
   - Reasoning: INSTRUCTIONS.md explicitly prohibits setState usage in widgets (line 37-41)
   - Files affected: order_item_card.dart, order_widgets.dart, bluetooth_print_page.dart, bill_page.dart, bill_search_page.dart, register_page.dart, orders_page.dart, vendors_page.dart

2. **Inconsistent Form Model Structure**
   - Issue: Some form models are missing validation logic
   - Fix: Move validation logic from UI widgets to dedicated validator classes
   - Reasoning: Validation should reside in presentation layer but not in providers (lines 68-74)
   - Files affected: order_form_models.dart, box_order_edit_form_provider.dart, printing_job_edit_form_provider.dart

3. **Missing Calculation Services**
   - Issue: Business logic calculations embedded directly in UI widgets
   - Fix: Extract calculation logic to dedicated calculation services
   - Reasoning: Business logic should be in presentation/services/<feature>_calculation.dart (lines 75-83)
   - Examples:
     - order_item_card.dart has pricing calculations that should be moved to a service
     - bill_page.dart has _calculateLineTotal and other calculations that should be in a service
     - bill_search_page.dart has status color logic that should be in a service
     - orders_page.dart has _calculateTotalAmount and status formatting logic (lines 627-656)

4. **Hardcoded Values**
   - Issue: Hardcoded strings, colors, and numeric values throughout the codebase
   - Fix: Extract to constants files in appropriate locations
   - Reasoning: "Extract all hardcoded values" (line 100)
   - Files affected: inventory_page.dart, box_order_edit_dialog.dart, printing_job_edit_dialog.dart, bluetooth_print_page.dart, bill_page.dart, bill_search_page.dart, register_page.dart, orders_page.dart, vendors_page.dart

5. **Inconsistent Response/Request Model Organization**
   - Issue: Some API models are combined in single files rather than separated
   - Fix: Separate request and response models into distinct files
   - Reasoning: File naming conventions specify separate files (lines 107-108)
   - Memory: User prefers to separate Request and Response models into separate files (ID: 4925329)

## UI & Responsiveness Issues

1. **Incorrect Loading Widget Usage**
   - Issue: Custom loading indicators used instead of standardized LoadingWidget
   - Fix: Replace all custom loading indicators with LoadingWidget from shared_widgets.dart
   - Reasoning: "LoadingWidget use only from shared_widgets.dart" (line 63)
   - Files affected: box_order_edit_dialog.dart, printing_job_edit_dialog.dart, bluetooth_print_page.dart, register_page.dart (line 266)

2. **Stateful UI Widgets**
   - Issue: Several UI components are stateful when they should be stateless
   - Fix: Convert to stateless widgets that receive state via constructor and modify via callbacks
   - Reasoning: "UI widgets should be stateless" (line 45)
   - Files affected: order_item_card.dart, box_order_edit_dialog.dart, printing_job_edit_dialog.dart, bluetooth_print_page.dart, bill_page.dart, bill_search_page.dart, register_page.dart, orders_page.dart, vendors_page.dart

3. **Snackbar Handling**
   - Issue: Direct ScaffoldMessenger usage instead of snackbar_utils
   - Fix: Use SnackbarUtils for consistent error/success handling
   - Reasoning: Memory about error cases showing snackbars (ID: 5060266)
   - Files affected: inventory_page.dart (lines 263-272)

4. **Inconsistent Responsive Design**
   - Issue: Some pages don't properly adapt to all screen sizes
   - Fix: Ensure all screens use responsive layouts based on screen size
   - Reasoning: "Every screen must be responsive" (line 48-50)
   - Files affected: bluetooth_print_page.dart (needs better desktop layout)

5. **Inconsistent Shimmer Usage**
   - Issue: Some pages use shimmer_widgets.dart correctly while others implement custom loading indicators
   - Fix: Standardize shimmer usage across the app using the existing shimmer_widgets.dart components
   - Reasoning: Consistent UI loading patterns (line 62-64)
   - Good example: vendors_page.dart uses ShimmerWrapper correctly (lines 163-170)
   - Files to fix: Multiple files that should use shimmer components

## Code Quality & Maintainability

1. **Duplicate Logic**
   - Issue: Repeated code patterns for form handling in dialog widgets
   - Fix: Extract common patterns to shared utilities
   - Reasoning: "Avoid code duplication" (line 97)
   - Examples:
     - Similar form handling in box_order_edit_dialog.dart and printing_job_edit_dialog.dart
     - Repeated payment calculation logic in bill_page.dart
     - Status color/text logic duplicated in bill_page.dart, bill_search_page.dart, and orders_page.dart (lines 643-656)

2. **Missing Model Suffix**
   - Issue: Nested API models missing APIModel suffix
   - Fix: Add APIModel suffix to nested models in response files
   - Reasoning: Memory about naming nested models with suffix APIModel (ID: 4925329)

3. **Inconsistent Error Handling**
   - Issue: Inconsistent approach to API error handling
   - Fix: Standardize error handling approach across all API calls
   - Reasoning: Consistent architecture and error handling is important for maintainability
   - Files affected: base_service.dart and various service implementations

4. **Excessive Commenting**
   - Issue: Comments that restate what the code already makes clear
   - Fix: Remove redundant comments, keep only those explaining non-trivial logic
   - Reasoning: "Use meaningful comments only" (line 103)
   - Examples:
     - base_service.dart has many obvious comments
     - bluetooth_print_page.dart has excessive logging
     - bill_page.dart has redundant comments

5. **Unused Imports**
   - Issue: Several files have unused imports
   - Fix: Remove unused imports to improve code clarity
   - Reasoning: Clean code practices
   - Files affected: Multiple files

6. **Validation Logic in UI**
   - Issue: Form validation logic embedded directly in UI components
   - Fix: Move validation logic to dedicated validators or form models
   - Reasoning: "All form validation must reside in the presentation layer" (line 68)
   - Files affected: register_page.dart (lines 107-114, 132-139, 185-192, 215-223)

7. **Inconsistent Validation Approaches**
   - Issue: Different approaches to validation across the app
   - Fix: Standardize validation approach using ValidationResult pattern
   - Reasoning: Consistent validation approach improves maintainability
   - Examples:
     - Some models use the ValidationResult pattern (auth_form_models.dart)
     - Others use direct validation in UI components

## Feature-Specific Issues

1. **Orders Module**
   - Issue: Business logic embedded in UI components
   - Fix: Extract calculation and formatting logic to dedicated services
   - Reasoning: "Never embed business logic in UI files" (line 43)
   - Files affected: 
     - orders_page.dart (_calculateTotalAmount, _formatStatus, _getStatusColor methods)
     - order_item_card.dart, order_widgets.dart

2. **Production Module**
   - Issue: Missing validation in box_order and printing_job form models
   - Fix: Add proper validation logic in dedicated validator classes
   - Reasoning: "All form validation must reside in the presentation layer" (line 69)
   - Files affected: box_order_edit_form_provider.dart, printing_job_edit_form_provider.dart

3. **Cards Module**
   - Issue: Business logic embedded in inventory_page.dart
   - Fix: Extract to appropriate services
   - Reasoning: "Never embed business logic in UI files" (line 43)
   - Files affected: inventory_page.dart

4. **Bills Module**
   - Issue: Business logic embedded in bill_page.dart and bill_search_page.dart
   - Fix: Extract calculation logic to bill_calculation_service.dart
   - Reasoning: "Never embed business logic in UI files" (line 43)
   - Files affected: 
     - bill_page.dart (_calculateLineTotal, payment calculations)
     - bill_search_page.dart (_getStatusColor and _getStatusText methods)

5. **Auth Module**
   - Issue: Mixed validation approaches
   - Fix: Standardize on ValidationResult pattern from auth_form_models.dart
   - Reasoning: "All form validation must reside in the presentation layer" (line 68)
   - Files affected: register_page.dart
   - Note: auth_form_models.dart has good validation implementation that should be used as a pattern

6. **API Service Structure**
   - Issue: Inconsistent handling of showSnackbar parameter
   - Fix: Implement consistent approach to snackbar display in API calls
   - Reasoning: Memory about fetching-type API calls not showing snackbars with showSnackbar: false (ID: 5060266)
   - Files affected: base_service.dart and various service implementations

7. **Bluetooth Printing Module**
   - Issue: Excessive state management in UI component
   - Fix: Extract state management to dedicated provider
   - Reasoning: "UI widgets should be stateless" (line 45)
   - Files affected: bluetooth_print_page.dart

8. **Vendors Module**
   - Issue: Direct setState usage in vendors_page.dart
   - Fix: Move state management to vendor_provider.dart
   - Reasoning: "UI widgets should be stateless" (line 45)
   - Files affected: vendors_page.dart (lines 78-80, 83-85)

9. **Cross-Feature Dependencies**
   - Issue: Some features directly use providers from other modules
   - Fix: Call service methods directly instead of using providers from other modules
   - Reasoning: "Do not use providers from other modules to prevent shared state conflicts" (line 87)
   - Files affected: Multiple files across features
   - Example: auth_provider.dart using permission_provider directly (line 7)
   - Example: vendors_page.dart using permission_provider directly (line 63-69)

## Implementation Recommendations

1. **Validation Strategy**
   - Use the ValidationResult pattern from auth_form_models.dart as a standard approach
   - Leverage the base_validator.dart and validation_result.dart classes
   - Create dedicated validator classes for complex validation scenarios
   - Keep simple validations in form models

2. **State Management Strategy**
   - Convert all stateful widgets to stateless
   - Create dedicated providers for each feature
   - Pass state via constructor and callbacks
   - Use Consumer pattern for UI updates

3. **Business Logic Strategy**
   - Create calculation services for each feature
   - Extract all business logic from UI components
   - Use pure functions for calculations
   - Avoid side effects in calculation services

4. **UI Component Strategy**
   - Use shared_widgets.dart components consistently
   - Use shimmer_widgets.dart for loading states
   - Follow responsive design patterns from vendors_page.dart
   - Create reusable components for common UI patterns